print("test print file")
"""
一、文件操作
    1、介绍
        计算机系统分为：计算机硬件、操作系统、应用程序三部分
        python或其他语言编写的应用程序如果想把数据永久保存下来，必须保存与硬盘中，这涉及到应用程序要操作硬件。
        应用程序操作硬件需要借助操作系统。操作系统把复杂的硬件操作封装成简单的接口给用户/应用程序使用，
        其中文件就是操作系统提供给应用程序来操作硬盘虚拟概念。用户或应用程序通过操作文件哎，可以把自己的数据永久保存下来。
        有了文件的概念，我们就无需考虑硬盘的细节，只需要关注操作文件的流程：
            #1 打开文件，得到文件句柄并赋值给一个变量
            #2 通过句柄对文件进行操作
            #3 关闭文件
    2、在python中
"""
# #1 打开文件，得到文件句柄并赋值给变量
# f = open("a.txt", "r", encoding="utf-8")  # 默认打开模式：r
#
# #2 通过句柄对文件进行操作
# data = f.read()
#
# #3 关闭文件
# f.close()

"""
    3 f = open("a.txt", "r") 的过程分析
        #1 由应用程序向操作系统发起系统调用open(...)
        #2 操作系统打开文件，并返回一个文件句柄给应用程序
        #3 应用程序将文件句柄赋值给变量f
    4 注意
        第一点：资源回收
            打开一个文件包含两部分资源: 操作系统级打开的文件 + 应用程序的变量。
            在操作完毕一个文件时，必须把该文件的这两部分资源都回收。
            回收方法是：（1）f.close() #回收系统级打开的文件
                        （2）del f #回收应用程序级别的变量
            其中def f 一定是发生在 f.close() 之后，否则就会导致操作系统打开的文件还没关闭，占用资源。
            而python 自动的垃圾回收机制会帮我们回收f 变量对应的应用程序的资源，所有我们只需要在使用完通过f.close()释放系统级资源。
            
            我们可以通过with 关键字来管理打开的文件，在with 里面的代码执行完毕之后，其将自动为我们关闭文件，释放资源：
            """
# with open("a.txt", "r") as read_f, open("b.txt", 'w') as write_f:
#     data = read_f.read()
#     write_f.write(data)

"""
        第二点：编码
        f= open(...)是由系统打开文件，如果没有为open指定编码，那么打开文件的编码是系统默认编码；
        在windows 下是gbk, 在Linux 下是 utf-8.为了防止出现乱码，文件用什么方式保存，就需要用对应的编码打开。
        f = open("a.txt", 'r', encoding='utf-8')
        
    5 python2 中的file 与 open
        #首先在python3中操作文件只有一种选择，那就是open()
        #而在python2中则有两种方式：file()与open()
        两者都能够打开文件，对文件进行操作，也具有相似的用法和参数，但是，这两种文件打开方式有本质的区别，
        file为文件类，用file()来打开文件，相当于这是在构造文件类，而用open()打开文件，是用python的内建函数来操作，
        我们一般使用open()打开文件进行操作，而用file当做一个类型，比如type(f) is file
        
        
二、打开文件的模式
    文件句柄 = open('文件路径', '模式')
    模式可以是一下方式以及他们之间的组合：
        ------------------------
    1 打开文件的模式有（默认为文本模式）
        r 只读模式 默认模式，文件必须存在，不存在则抛出异常
        w 只写模式 不可读，不存在则创建；存在则清空内容
        a 追加模式 不可读；不存在则插件，存在则只追加内容
    
    2 对于非文本文件，只能使用b模式
        "b" 表示以字节的方式操作（而所有文件也都是以字节的形式存储的，使用这种模式无需考虑文本文件的字符编码、
        图片文件的jpg格式，视频文件的avi格式）
        rb
        wb
        ab
        注:以b方式打开时，读取到的内容是字节类型，写入时也需要提供字节类型，不能指定编码
    3 了解部分: "+" 表示可以同时读写某个文件
        r+ 可读写
        w+ 可写读
        a+ 可写读
        
        x 只写模式 不可读，不存在则创建，存在则报错
        x+ 可写读
        xb 
    
    
三、操作文件的方法
    #掌握
    f.read() #读取所有内容,光标移动到文件末尾
    f.readline() #读取一行内容,光标移动到第二行首部
    f.readlines() #读取每一行内容,存放于列表中
    
    f.write('1111\n222\n') #针对文本模式的写,需要自己写换行符
    f.write('1111\n222\n'.encode('utf-8')) #针对b模式的写,需要自己写换行符
    f.writelines(['333\n','444\n']) #文件模式
    f.writelines([bytes('333\n',encoding='utf-8'),'444\n'.encode('utf-8')]) #b模式
    
    #了解
    f.readable() #文件是否可读
    f.writable() #文件是否可读
    f.closed #文件是否关闭
    f.encoding #如果文件打开模式为b,则没有该属性
    f.flush() #立刻将文件内容从内存刷到硬盘
    f.name
   
   
四、文件内光标移动
    1 read(3)
        (1)文件打开方式问文本模式时，代表读取3个字符
        (2)文件打开方式为b模式时，代表读取3个字节
    2 其余文件内光标移动都是以字节为单位，如 seek，tell,truncate
        (1)seek有三种移动方式：1，2，其中1和2必须在b模式下进行，但无论哪种模式，都是以bytes为单位移动的
            0 默认方式，从文件的其实开始计算字节的位置
            1 从上一次光标的位置开始计算光标的位置
            2 从末尾倒着计算光标的位置
        （2）truncate 是截断文件，所以文件的打开方式必须可写，但是不能用 w 或 w+ 方式打开，
            以为这两种方式会清空文件，所以truncate要在r+或a或a+等模式下测试效果
 五、文件修改
    文件的数据是存放在于硬盘上的，因而修改文件需要将原来的文件进行覆盖，具体有两种实现方式：
    （1）将硬盘存放的该文件内容全部加载到内存，在内存中修改，修改后，由内存覆盖硬盘（vim等）
    （2）将硬盘存放的文件内容一行一行地读入内存，修改完毕后写入新文件，最后用新文件覆盖源文件。
    
"""